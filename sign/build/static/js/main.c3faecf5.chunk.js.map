{"version":3,"sources":["Cam.js","Home.js","App.js","index.js"],"names":["Cam","webcamRef","useRef","canvasRef","labelMap","1","name","color","2","3","4","5","useState","words","setWords","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke","console","log","runCoco","a","tf","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","img","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","executeAsync","obj","array","getContext","requestAnimationFrame","useEffect","className","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","Home","to","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3faecf5.chunk.js","sourcesContent":["// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { nextFrame } from \"@tensorflow/tfjs\";\r\n// 2. TODO - Import drawing utility here\r\n// e.g. import { drawRect } from \"./utilities\";\r\n\r\n\r\nfunction Cam() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  \r\n  const labelMap = {\r\n    1:{name:'Hello', color:'red'},\r\n    2:{name:'Thank You', color:'yellow'},\r\n    3:{name:'I Love You', color:'lime'},\r\n    4:{name:'Yes', color:'blue'},\r\n    5:{name:'No', color:'purple'},\r\n}\r\nconst [words,setWords] = useState('')\r\n// Define a drawing function\r\nconst drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx,)=>{\r\n    for(let i=0; i<=boxes.length; i++){\r\n        if(boxes[i] && classes[i] && scores[i]>threshold){\r\n            // Extract variables\r\n            const [y,x,height,width] = boxes[i]\r\n            const text = classes[i]\r\n            \r\n            // Set styling\r\n            ctx.strokeStyle = labelMap[text]['color']\r\n            ctx.lineWidth = 10\r\n            ctx.fillStyle = 'white'\r\n            ctx.font = '30px Arial'         \r\n            \r\n            // DRAW!!\r\n            ctx.beginPath()\r\n            ctx.fillText(labelMap[text]['name'] + ' ' + Math.round(scores[i]*100)/100, x*imgWidth, y*imgHeight-10)\r\n            ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth/2.5, height*imgHeight/2);\r\n            ctx.stroke()\r\n            \r\n            \r\n            console.log(labelMap[text][\"name\"])\r\n            if(words !== labelMap[text]['name']){\r\n                setWords(labelMap[text][\"name\"])\r\n            }\r\n            // setWord = labelMap[text][\"name\"]\r\n        }\r\n    }\r\n}\r\n  // Main function\r\n  const runCoco = async () => {\r\n    // 3. TODO - Load network \r\n    // e.g. const net = await cocossd.load();\r\n    // https://tensorflowjsrealtimemodel.s3.au-syd.cloud-object-storage.appdomain.cloud/model.json\r\n    const net = await tf.loadGraphModel('https://tensorflowjsrealtimemodel.s3.au-syd.cloud-object-storage.appdomain.cloud/model.json')\r\n    \r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 16.7);\r\n  };\r\n  \r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // 4. TODO - Make Detections\r\n      const img = tf.browser.fromPixels(video)\r\n      const resized = tf.image.resizeBilinear(img, [640,480])\r\n      const casted = resized.cast('int32')\r\n      const expanded = casted.expandDims(0)\r\n      const obj = await net.executeAsync(expanded)\r\n      // console.log(obj)\r\n\r\n      const boxes = await obj[1].array()\r\n      const classes = await obj[2].array()\r\n      const scores = await obj[4].array()\r\n      \r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // 5. TODO - Update drawing utility\r\n      // drawSomething(obj, ctx)  \r\n      requestAnimationFrame(()=>{drawRect(boxes[0], classes[0], scores[0], 0.8, videoWidth, videoHeight, ctx)}); \r\n\r\n      tf.dispose(img)\r\n      tf.dispose(resized)\r\n      tf.dispose(casted)\r\n      tf.dispose(expanded)\r\n      tf.dispose(obj)\r\n\r\n    }\r\n  };\r\n  \r\n  useEffect(()=>{runCoco()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          muted={true} \r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"1vw\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: '60vw',\r\n            height: '75vh',\r\n           \r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"1vw\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: '60vw',\r\n            height: '75vh',\r\n  \r\n          }}\r\n        />\r\n      </header>\r\n      <div className=\"text\">\r\n        <p>{words}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cam;\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Home (){\r\n    return(\r\n        <div className=\"home\">\r\n            <h1>Welcome to My project</h1>\r\n            <div className='textHome'>\r\n                <p>Project in Progress</p>\r\n                <p>My goal with this project is to able people that are mute and/or deaf to be able to use zoom and other telecommunication services</p>\r\n                <p>For the moment my project translate sign laguage to word, my second step will be to add an AI voice  to read each word that are sign  and to add more sign</p>\r\n            </div>\r\n            <Link className=\"Link\" to='./cam'>\r\n            <p>Click to Try</p>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\nexport default Home","import React from 'react'\r\nimport Cam from './Cam'\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport Home from './Home'\r\nimport './App.css'\r\n\r\nfunction App (){\r\n    return(\r\n        <div className=\"App\">\r\n        <Switch>\r\n            <Route exact path='/'>\r\n                <Home />\r\n            </Route>\r\n            <Route exact path='/cam'>\r\n                <Cam />\r\n            </Route>\r\n        \r\n            \r\n            \r\n       \r\n        </Switch>\r\n        </div>\r\n    )\r\n}\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}